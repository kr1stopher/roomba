#! usr/bin/env python
import rospy

from nav_msgs.msg import OccupancyGrid
from nav_msgs.msg import Odometry

#global variables
isExplored = []
percentExplored = 0
centeri = -1
centerj = -1
resolution = -1




#odom(x,y) -> /map data[i-(y/resolution), i+(x/resolution)] for origin of turtlebot


class exploredData:
    def __init__(self):
        self.map = []
        self.percentExplored = 0
        self.centeri = -1
        self.centerj = -1
        self.resolution = -1



def turtlebotCoverage(msg):
  if (rospy.get_param('MODEL', 'waffle')== 'waffle'):
      length = .281
      width = .306
  if (rospy.get_param('model', 'waffle')== 'burger'):
      length = .138
      width = .178


def exploredInit(data):
    print('Im in here and heard shit')
    #rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
    global isExplored, centeri, centerj
    isExplored = data.data
    centeri  = (data.info.width/2)
    centerj = (data.info.width/2)
    resolution = data.info.resolution
    #turtlebotCoverage(msg)


def updateExplored(msg):
    
    pass
    #update isExplored based on tbot odometry data and dimensions


def main():
    sub = rospy.Subscriber('/odom',Odometry, updateExplored)
    rospy.spin() # continue until exit


if __name__ == '__main__':
    rospy.init_node('roomba')
    msg = rospy.wait_for_message('/map', OccupancyGrid, timeout = 5)
    exploredInit(msg)
    print(isExplored)
    print(centeri, centerj)
    main()
